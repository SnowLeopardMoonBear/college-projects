#include <stdio.h>
#include <stdlib.h>
#define pnum 10//기본값 10
#define quantum 3
#define ionum 3
#define qsize 20
//longestio까지 구현, preemption bug 존재!
typedef struct _process {//작동확인
	int pid, arr_t, cpu_t, rem_t, pri, io, io_rem_t, wait_t, ta_t;
}process;

int real_queuesize(process* queue, int queue_size) {//큐에 할당한 메모리와는 관계없이 실제로 들어있는 프로세스의 수를 파악
	int i;
	for (i = 0; i < queue_size; i++) {
		if (queue[i].pid == 0) {
			return (i);//왠지는 모르겠지만 i가 아닌 i-1로 잡으니 제대로 정렬한다...(arr_sort테스트중)
		}
	}
}

void print_queue(process *queue, int queue_size) {//test성공
	int i;
	printf("ID   AT   CT   RT   Pri   IO   IOr   WtT   TaT\n");
	for (i = 0; i < queue_size; i++) {
		printf("%d    %d    %d    %d    %d    %d    %d    %d     %d\n", queue[i].pid, queue[i].arr_t, queue[i].cpu_t, queue[i].rem_t, queue[i].pri, queue[i].io, queue[i].io_rem_t, queue[i].wait_t, queue[i].ta_t);
	}
}

void array_initialization(process* queue) {
	int i;
	process initial_value = { .pid = 0,.arr_t = 0,.cpu_t = 0,.rem_t = 0,.pri = 0,.io = 0,.io_rem_t = 0,.wait_t = 0,.ta_t = 0 };
	for (i = 0; i < qsize; i++) {
		queue[i] = initial_value;
	}
}

void generate_process(process* pro, int *io_array) {//작동확인
	int i, j, k;
	for (i = 0; i < pnum; i++) {
		pro[i].pid = i + 1;

		while (1) {//arrival time 안 겹치게 함
			int found = 0;
			pro[i].arr_t = rand() % 50;
			for (j = 0; j < i; ++j) {
				if (pro[j].arr_t == pro[i].arr_t) {//겹치면 다시 생성
					found = 1;
					break;
				}
			}
			if (!found) break;
		}

		while (1) {//priority 안 겹치게 함
			int found = 0;
			pro[i].pri = rand() % 50;
			found = 0;
			for (j = 0; j < i; ++j) {
				if (pro[j].pri == pro[i].pri) {//겹치면 다시
					found = 1;
					break;
				}
			}
			if (!found) break;
		}

		pro[i].cpu_t = rand() % 10 + 1;
		pro[i].rem_t = pro[i].cpu_t;
		pro[i].io = 0;
		for (k = 0; k < ionum; k++) {
			if (io_array[k] == i + 1) {
				pro[i].io = rand() % 3 + 1;
			}
		}
		pro[i].io_rem_t = pro[i].io;
		pro[i].wait_t = NULL;
		pro[i].ta_t = NULL;
	}
}

void copy_process(process *orig, process *copy) {//작동확인!
	int i;
	for (i = 0; i < pnum; i++) {
		copy[i] = orig[i];
	}
}

void pid_sort(process *pro_array) {//pid 순으로 버블소트
	int i, j = 0;
	int real_size = real_queuesize(pro_array, qsize);
	for (i = 0; i < real_size - 1; i++) {
		for (j = 0; j < real_size - 1 - i; j++) {
			if (pro_array[j].pid > pro_array[j + 1].pid) {
				process temp = pro_array[j];
				pro_array[j] = pro_array[j + 1];
				pro_array[j + 1] = temp;
			}
		}
	}
}

void arr_sort(process *pro_array) {//arrival time 순으로 버블소트
	int i, j = 0;
	int real_size = real_queuesize(pro_array, qsize);
	for (i = 0; i < real_size - 1; i++) {
		for (j = 0; j < real_size - 1 - i; j++) {
			if (pro_array[j].arr_t > pro_array[j + 1].arr_t) {
				process temp = pro_array[j];
				pro_array[j] = pro_array[j + 1];
				pro_array[j + 1] = temp;
			}
		}
	}
}

void rem_sort(process *pro_array) {//remaining time 순으로 버블소트
	int i, j = 0;
	int real_size = real_queuesize(pro_array, qsize);
	for (i = 0; i < real_size - 1; i++) {
		for (j = 0; j < real_size - 1 - i; j++) {
			if (pro_array[j].rem_t > pro_array[j + 1].rem_t) {
				process temp = pro_array[j];
				pro_array[j] = pro_array[j + 1];
				pro_array[j + 1] = temp;
			}
		}
	}
}

void pri_sort(process *pro_array) {//priority time 순으로 버블소트
	int i, j = 0;
	int real_size = real_queuesize(pro_array, qsize);
	for (i = 0; i < real_size - 1; i++) {
		for (j = 0; j < real_size - 1 - i; j++) {
			if (pro_array[j].pri > pro_array[j + 1].pri) {
				process temp = pro_array[j];
				pro_array[j] = pro_array[j + 1];
				pro_array[j + 1] = temp;
			}
		}
	}
}

void io_sort(process *pro_array) {//io '큰' 순으로 버블소트
	int i, j = 0;
	int real_size = real_queuesize(pro_array, qsize);
	for (i = 0; i < real_size - 1; i++) {
		for (j = 0; j < real_size - 1 - i; j++) {
			if (pro_array[j].io < pro_array[j + 1].io) {
				process temp = pro_array[j];
				pro_array[j] = pro_array[j + 1];
				pro_array[j + 1] = temp;
			}
		}
	}
}

void enqueue(process *pro_array, process pro, int n) {//동작확인
	int i;
	for (i = 0; i < n - 1; i++) {
		if (pro_array[i].pid == 0) {
			pro_array[i] = pro;
			break;
		}
	}
}

process dequeue(process *pro_array) { //큐사이즈로 바꾼 뒤에도 동작 확인
	int i;
	process pop = pro_array[0];
	for (i = 0; i < qsize - 1; i++) {
		pro_array[i] = pro_array[i + 1];
	}
	pro_array[qsize - 1].pid = 0;
	pro_array[qsize - 1].arr_t = 0;
	pro_array[qsize - 1].cpu_t = 0;
	pro_array[qsize - 1].rem_t = 0;
	pro_array[qsize - 1].pri = 0;
	pro_array[qsize - 1].io = 0;
	pro_array[qsize - 1].io_rem_t = 0;
	pro_array[qsize - 1].wait_t = 0;
	pro_array[qsize - 1].ta_t = 0;

	return pop;
}


/*
process generate_io_array() {
	int i=0;
	while(i<)
	return;
}
*/

void eval(process* pro_array) { // 일단은 int로 함. 
	int i;
	int temp_wt = 0;
	int temp_tt = 0;
	for (i = 0; i < pnum; i++) {
		temp_wt += pro_array[i].wait_t;
		temp_tt += pro_array[i].ta_t;
	}
	int avg_wt = temp_wt / pnum;
	int avg_tt = temp_tt / pnum;
	printf("average waiting time is %d\n", avg_wt);
	printf("average turnaround time is %d\n", avg_tt);
}

void fcfs(process *new_process) {//버그해결!!!!!
	printf("\n");
	printf("<fcfs>\n");
	//모든 프로세스 공통부
	int time = 0;
	int fin_process = 0;
	int ready_tail = 0;
	process copy_queue[qsize];//fcfs만 테스트차 pnum에서 qsize로 바꿈(이게 더 나은 듯? 다른 알고리즘서도 작동 잘 하면 확정 가즈아!)
	array_initialization(copy_queue);
	process ready_queue[qsize];
	array_initialization(ready_queue);
	//process waiting_queue;
	process running_process;
	process fin_queue[qsize];
	array_initialization(fin_queue);
	running_process.pid = -1;//아무것도 없음
	running_process.rem_t = -1;

	//initialization
	copy_process(new_process, copy_queue);//카피프로세스 버그는 모든 큐 사이즈 qsize로 통일시 해결
	copy_process(new_process, fin_queue);
	arr_sort(copy_queue);

	//execution
	while (fin_process < pnum && time < 120) {//완료된 프로세스가 프로세스 수보다 적을 때 반복
		if (copy_queue[0].arr_t == time) {//arrival time을 만족시키는 프로세스를 카피 큐에서 레디 큐로 적재한다.
			process temp = dequeue(copy_queue);
			enqueue(ready_queue, temp, pnum);
			ready_tail++;
		}

		if (running_process.rem_t == 0) {//running process remaining_t가 0이 될 때 상황.
			running_process.ta_t = time - running_process.arr_t;
			running_process.wait_t = running_process.ta_t - running_process.cpu_t; //여기 채워넣기
			fin_queue[running_process.pid - 1] = running_process;//fin queue로 값 복사
			running_process.pid = -1;//러닝중이던 프로세스 제거
			running_process.rem_t = -1;
			fin_process++;
			if (ready_tail != 0) { // 레디큐에 프로세스가 있으면 새로운 프로세스 할당
				running_process = dequeue(ready_queue);
				ready_tail--;
			}
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (running_process.pid == -1 && ready_tail != 0) {//아무것도 없을 때 ready queue에서 process를 가져와 CPU에 적재한다.
			running_process = dequeue(ready_queue);
			ready_tail--;
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (running_process.pid != -1 && running_process.rem_t >= 1) {
			//printf("time: %d, process: %d\n", time, running_process.pid);
			running_process.rem_t--;
		}
		printf("time: %d, process: %d\n", time, running_process.pid);
		time++;
	}

	//evaluation
	print_queue(fin_queue, pnum);
	eval(fin_queue);

}

void sjf(process *new_process) {
	printf("\n");
	printf("<sjf>\n");
	//모든 프로세스 공통부
	int time = 0;
	int fin_process = 0;
	int ready_tail = 0;
	process copy_queue[qsize];//fcfs만 테스트차 pnum에서 qsize로 바꿈(이게 더 나은 듯? 다른 알고리즘서도 작동 잘 하면 확정 가즈아!)
	array_initialization(copy_queue);
	process ready_queue[qsize];
	array_initialization(ready_queue);
	//process waiting_queue;
	process running_process;
	process fin_queue[qsize];
	array_initialization(fin_queue);
	running_process.pid = -1;//아무것도 없음
	running_process.rem_t = -1;

	//initialization
	copy_process(new_process, copy_queue);//카피프로세스 버그는 모든 큐 사이즈 qsize로 통일시 해결
	copy_process(new_process, fin_queue);
	print_queue(copy_queue, qsize);
	//execution
	arr_sort(copy_queue);
	while (fin_process < pnum && time < 120) {//완료된 프로세스가 프로세스 수보다 적을 때 반복
		rem_sort(ready_queue);//ready queue 기준 remaining time 순으로 정렬

		if (copy_queue[0].arr_t == time) {//arrival time을 만족시키는 프로세스를 카피 큐에서 레디 큐로 적재한다.
			process temp = dequeue(copy_queue);
			enqueue(ready_queue, temp, pnum);
			ready_tail++;
		}

		if (running_process.rem_t == 0) {//running process remaining_t가 0이 될 때 상황.
			running_process.ta_t = time - running_process.arr_t;
			running_process.wait_t = running_process.ta_t - running_process.cpu_t; //여기 채워넣기
			fin_queue[running_process.pid - 1] = running_process;//fin queue로 값 복사
			running_process.pid = -1;//러닝중이던 프로세스 제거
			running_process.rem_t = -1;
			fin_process++;
			if (ready_tail != 0) { // 레디큐에 프로세스가 있으면 새로운 프로세스 할당
				running_process = dequeue(ready_queue);
				ready_tail--;
			}
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (running_process.pid == -1 && ready_tail != 0) {//아무것도 없을 때 ready queue에서 process를 가져와 CPU에 적재한다.
			running_process = dequeue(ready_queue);
			ready_tail--;
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (running_process.pid != -1 && running_process.rem_t >= 1) {
			//printf("time: %d, process: %d\n", time, running_process.pid);
			running_process.rem_t--;
		}
		printf("time: %d, process: %d\n", time, running_process.pid);
		time++;
	}

	//evaluation
	print_queue(fin_queue, pnum);
	eval(fin_queue);

}

void srt(process* new_process) {
	printf("\n");
	printf("<srt>\n");
	//모든 프로세스 공통부
	int time = 0;
	int fin_process = 0;
	int ready_tail = 0;
	process copy_queue[qsize];//fcfs만 테스트차 pnum에서 qsize로 바꿈(이게 더 나은 듯? 다른 알고리즘서도 작동 잘 하면 확정 가즈아!)
	array_initialization(copy_queue);
	process ready_queue[qsize];
	array_initialization(ready_queue);
	//process waiting_queue;
	process running_process;
	process fin_queue[qsize];
	array_initialization(fin_queue);
	running_process.pid = -1;//아무것도 없음
	running_process.rem_t = -1;

	//initialization
	copy_process(new_process, copy_queue);//카피프로세스 버그는 모든 큐 사이즈 qsize로 통일시 해결
	copy_process(new_process, fin_queue);
	print_queue(copy_queue, qsize);
	//execution
	arr_sort(copy_queue);
	while (fin_process < pnum && time < 120) {//완료된 프로세스가 프로세스 수보다 적을 때 반복
		rem_sort(ready_queue);//ready queue 기준 remaining time 순으로 정렬

		if (copy_queue[0].arr_t == time) {//arrival time을 만족시키는 프로세스를 카피 큐에서 레디 큐로 적재한다.
			process temp = dequeue(copy_queue);
			enqueue(ready_queue, temp, pnum);
			ready_tail++;
		}

		if (running_process.rem_t > ready_queue[0].rem_t && ready_queue[0].rem_t != 0) {
			enqueue(ready_queue, running_process, pnum);
			running_process = ready_queue[0];
		}

		if (running_process.rem_t == 0) {//running process remaining_t가 0이 될 때 상황.
			running_process.ta_t = time - running_process.arr_t;
			running_process.wait_t = running_process.ta_t - running_process.cpu_t; //여기 채워넣기
			fin_queue[running_process.pid - 1] = running_process;//fin queue로 값 복사
			running_process.pid = -1;//러닝중이던 프로세스 제거
			running_process.rem_t = -1;
			fin_process++;
			if (ready_tail != 0) { // 레디큐에 프로세스가 있으면 새로운 프로세스 할당
				running_process = dequeue(ready_queue);
				ready_tail--;
			}
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (running_process.pid == -1 && ready_tail != 0) {//아무것도 없을 때 ready queue에서 process를 가져와 CPU에 적재한다.
			running_process = dequeue(ready_queue);
			ready_tail--;
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (running_process.pid != -1 && running_process.rem_t >= 1) {
			//printf("time: %d, process: %d\n", time, running_process.pid);
			running_process.rem_t--;
		}
		printf("time: %d, process: %d\n", time, running_process.pid);
		time++;
	}

	//evaluation
	print_queue(fin_queue, pnum);
	eval(fin_queue);

}

void priority(process* new_process) {
	printf("\n");
	printf("<priority>\n");
	//모든 프로세스 공통부
	int time = 0;
	int fin_process = 0;
	int ready_tail = 0;
	process copy_queue[qsize];//fcfs만 테스트차 pnum에서 qsize로 바꿈(이게 더 나은 듯? 다른 알고리즘서도 작동 잘 하면 확정 가즈아!)
	array_initialization(copy_queue);
	process ready_queue[qsize];
	array_initialization(ready_queue);
	//process waiting_queue;
	process running_process;
	process fin_queue[qsize];
	array_initialization(fin_queue);
	running_process.pid = -1;//아무것도 없음
	running_process.rem_t = -1;

	//initialization
	copy_process(new_process, copy_queue);//카피프로세스 버그는 모든 큐 사이즈 qsize로 통일시 해결
	copy_process(new_process, fin_queue);
	print_queue(copy_queue, qsize);
	//execution
	arr_sort(copy_queue);
	while (fin_process < pnum && time < 120) {//완료된 프로세스가 프로세스 수보다 적을 때 반복
		pri_sort(ready_queue);//priority 순으로 정렬

		if (copy_queue[0].arr_t == time) {//arrival time을 만족시키는 프로세스를 카피 큐에서 레디 큐로 적재한다.
			process temp = dequeue(copy_queue);
			enqueue(ready_queue, temp, pnum);
			ready_tail++;
		}

		if (running_process.rem_t == 0) {//running process remaining_t가 0이 될 때 상황.
			running_process.ta_t = time - running_process.arr_t;
			running_process.wait_t = running_process.ta_t - running_process.cpu_t; //여기 채워넣기
			fin_queue[running_process.pid - 1] = running_process;//fin queue로 값 복사
			running_process.pid = -1;//러닝중이던 프로세스 제거
			running_process.rem_t = -1;
			fin_process++;
			if (ready_tail != 0) { // 레디큐에 프로세스가 있으면 새로운 프로세스 할당
				running_process = dequeue(ready_queue);
				ready_tail--;
			}
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (running_process.pid == -1 && ready_tail != 0) {//아무것도 없을 때 ready queue에서 process를 가져와 CPU에 적재한다.
			running_process = dequeue(ready_queue);
			ready_tail--;
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (running_process.pid != -1 && running_process.rem_t >= 1) {
			//printf("time: %d, process: %d\n", time, running_process.pid);
			running_process.rem_t--;
		}
		printf("time: %d, process: %d\n", time, running_process.pid);
		printf("num_fin_process: %d\n", fin_process);
		time++;
	}

	//evaluation
	print_queue(fin_queue, pnum);
	eval(fin_queue);

}


void pre_pri(process* new_process) {
	printf("\n");
	printf("<preemptive-priority>\n");
	//모든 프로세스 공통부
	int time = 0;
	int fin_process = 0;
	int ready_tail = 0;
	process copy_queue[qsize];//fcfs만 테스트차 pnum에서 qsize로 바꿈(이게 더 나은 듯? 다른 알고리즘서도 작동 잘 하면 확정 가즈아!)
	array_initialization(copy_queue);
	process ready_queue[qsize];
	array_initialization(ready_queue);
	//process waiting_queue;
	process running_process;
	process fin_queue[qsize];
	array_initialization(fin_queue);
	running_process.pid = -1;//아무것도 없음
	running_process.rem_t = -1;
	running_process.pri = 1000;

	//initialization
	copy_process(new_process, copy_queue);//카피프로세스 버그는 모든 큐 사이즈 qsize로 통일시 해결
	copy_process(new_process, fin_queue);
	print_queue(copy_queue, qsize);
	//execution
	arr_sort(copy_queue);
	while (fin_process < pnum && time < 120) {//완료된 프로세스가 프로세스 수보다 적을 때 반복
		pri_sort(ready_queue);//ready queue 기준 remaining time 순으로 정렬

		if (copy_queue[0].arr_t == time) {//arrival time을 만족시키는 프로세스를 카피 큐에서 레디 큐로 적재한다.
			process temp = dequeue(copy_queue);
			enqueue(ready_queue, temp, pnum);
			ready_tail++;
		}


		if (running_process.rem_t == 0) {//running process remaining_t가 0이 될 때 상황.
			running_process.ta_t = time - running_process.arr_t;
			running_process.wait_t = running_process.ta_t - running_process.cpu_t; //여기 채워넣기
			fin_queue[running_process.pid - 1] = running_process;//fin queue로 값 복사
			running_process.pid = -1;//러닝중이던 프로세스 제거
			running_process.rem_t = -1;
			fin_process++;
			if (ready_tail != 0) { // 레디큐에 프로세스가 있으면 새로운 프로세스 할당
				running_process = dequeue(ready_queue);
				ready_tail--;
			}
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (running_process.rem_t > ready_queue[0].rem_t && ready_queue[0].rem_t != 0) {
			enqueue(ready_queue, running_process, pnum);
			running_process = ready_queue[0];
		}

		if (running_process.pid == -1 && ready_tail != 0) {//아무것도 없을 때 ready queue에서 process를 가져와 CPU에 적재한다.
			running_process = dequeue(ready_queue);
			ready_tail--;
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (running_process.pid != -1 && running_process.rem_t >= 1) {
			//printf("time: %d, process: %d\n", time, running_process.pid);
			running_process.rem_t--;
		}
		printf("time: %d, process: %d\n", time, running_process.pid);
		time++;
	}

	//evaluation
	print_queue(fin_queue, pnum);
	eval(fin_queue);

}

void rr(process* new_process) {
	printf("\n");
	printf("<round robin>\n");
	//모든 프로세스 공통부
	int time = 0;
	int fin_process = 0;
	int ready_tail = 0;
	process copy_queue[qsize];//fcfs만 테스트차 pnum에서 qsize로 바꿈(이게 더 나은 듯? 다른 알고리즘서도 작동 잘 하면 확정 가즈아!)
	array_initialization(copy_queue);
	process ready_queue[qsize];
	array_initialization(ready_queue);
	//process waiting_queue;
	process running_process;
	process fin_queue[qsize];
	array_initialization(fin_queue);
	running_process.pid = -1;//아무것도 없음
	running_process.rem_t = -1;

	//initialization
	copy_process(new_process, copy_queue);//카피프로세스 버그는 모든 큐 사이즈 qsize로 통일시 해결
	copy_process(new_process, fin_queue);
	print_queue(copy_queue, qsize);
	int remaining_quantum = quantum;

	//execution
	arr_sort(copy_queue);
	while (fin_process < pnum && time < 120) {//완료된 프로세스가 프로세스 수보다 적을 때 반복

		if (copy_queue[0].arr_t == time) {//arrival time을 만족시키는 프로세스를 카피 큐에서 레디 큐로 적재한다.
			process temp = dequeue(copy_queue);
			enqueue(ready_queue, temp, pnum);
			ready_tail++;
		}

		if (running_process.rem_t == 0) {//running process remaining_t가 0이 될 때 상황.
			running_process.ta_t = time - running_process.arr_t;
			running_process.wait_t = running_process.ta_t - running_process.cpu_t; //여기 채워넣기
			fin_queue[running_process.pid - 1] = running_process;//fin queue로 값 복사
			running_process.pid = -1;//러닝중이던 프로세스 제거
			running_process.rem_t = -1;
			fin_process++;
			if (ready_tail != 0) { // 레디큐에 프로세스가 있으면 새로운 프로세스 할당
				running_process = dequeue(ready_queue);
				ready_tail--;
			}
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (remaining_quantum == 0) {
			enqueue(ready_queue, running_process, qsize);
			ready_tail++;
			running_process.pid = -1;
			running_process.rem_t = -1;
			if (ready_tail != 0) {
				running_process = dequeue(ready_queue);
			}
			remaining_quantum = quantum;
		}

		if (running_process.pid == -1 && ready_tail != 0) {//아무것도 없을 때 ready queue에서 process를 가져와 CPU에 적재한다.
			running_process = dequeue(ready_queue);
			ready_tail--;
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (running_process.pid != -1 && running_process.rem_t >= 1) {
			//printf("time: %d, process: %d\n", time, running_process.pid);
			running_process.rem_t--;
			remaining_quantum--;
		}
		printf("time: %d, process: %d\n", time, running_process.pid);
		time++;
	}

	//evaluation
	print_queue(fin_queue, pnum);
	eval(fin_queue);

}

void longest_io(process* new_process) {
	printf("\n");
	printf("<longest io>\n");
	//모든 프로세스 공통부
	int time = 0;
	int fin_process = 0;
	int ready_tail = 0;
	process copy_queue[qsize];//fcfs만 테스트차 pnum에서 qsize로 바꿈(이게 더 나은 듯? 다른 알고리즘서도 작동 잘 하면 확정 가즈아!)
	array_initialization(copy_queue);
	process ready_queue[qsize];
	array_initialization(ready_queue);
	//process waiting_queue;
	process running_process;
	process fin_queue[qsize];
	array_initialization(fin_queue);
	running_process.pid = -1;//아무것도 없음
	running_process.rem_t = -1;

	//initialization
	copy_process(new_process, copy_queue);//카피프로세스 버그는 모든 큐 사이즈 qsize로 통일시 해결
	copy_process(new_process, fin_queue);
	print_queue(copy_queue, qsize);
	//execution
	arr_sort(copy_queue);
	while (fin_process < pnum && time < 120) {//완료된 프로세스가 프로세스 수보다 적을 때 반복
		io_sort(ready_queue);//priority 순으로 정렬

		if (copy_queue[0].arr_t == time) {//arrival time을 만족시키는 프로세스를 카피 큐에서 레디 큐로 적재한다.
			process temp = dequeue(copy_queue);
			enqueue(ready_queue, temp, pnum);
			ready_tail++;
		}

		if (running_process.rem_t == 0) {//running process remaining_t가 0이 될 때 상황.
			running_process.ta_t = time - running_process.arr_t;
			running_process.wait_t = running_process.ta_t - running_process.cpu_t; //여기 채워넣기
			fin_queue[running_process.pid - 1] = running_process;//fin queue로 값 복사
			running_process.pid = -1;//러닝중이던 프로세스 제거
			running_process.rem_t = -1;
			fin_process++;
			if (ready_tail != 0) { // 레디큐에 프로세스가 있으면 새로운 프로세스 할당
				running_process = dequeue(ready_queue);
				ready_tail--;
			}
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (running_process.pid == -1 && ready_tail != 0) {//아무것도 없을 때 ready queue에서 process를 가져와 CPU에 적재한다.
			running_process = dequeue(ready_queue);
			ready_tail--;
			//printf("time: %d, process: %d\n", time, running_process.pid);
		}

		if (running_process.pid != -1 && running_process.rem_t >= 1) {
			//printf("time: %d, process: %d\n", time, running_process.pid);
			running_process.rem_t--;
		}
		printf("time: %d, process: %d\n", time, running_process.pid);

		time++;
	}

	//evaluation
	print_queue(fin_queue, pnum);
	eval(fin_queue);

}




//여기서부터 메인함수입니다.

int main() {

	srand(time(NULL)); //랜덤함수의 시드값이 계속 변하도록 설정.
	int i;
	int io_array[ionum] = { 3, 7, 9 };
	process new_process[qsize]; //원래는 다들 pnum 크기. 그냥 array는 qsize로 통일해버릴까 고려중
	array_initialization(new_process);
	generate_process(new_process, io_array);
	print_queue(new_process, qsize);

	fcfs(new_process);
	sjf(new_process);
	srt(new_process);
	priority(new_process);
	pre_pri(new_process);
	rr(new_process);
	longest_io(new_process);
}